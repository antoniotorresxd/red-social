services:
  gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - users_service
      - community_service
      - publications_service
      - chat_service
      - frontend
    networks:
      - backend

  users_service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    env_file:
      - ./services/users/src/.env
    working_dir: /app
    expose:
      - "8001"
    networks:
      - backend
    depends_on:
      - db_postgres_users

  db_postgres_users:
    image: postgres:15
    volumes:
      - pgdata_users:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - backend

  community_service:
    build:
      context: ./services/community
      dockerfile: Dockerfile
    env_file:
      - ./services/community/src/.env
    working_dir: /app
    expose:
      - "8002"
    networks:
      - backend
    depends_on:
      - db_postgres_community

  db_postgres_community:
    image: postgres:15
    volumes:
      - pgdata_community:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - backend

  publications_service:
    build:
      context: ./services/publications
      dockerfile: Dockerfile
    env_file:
      - ./services/publications/src/.env
    working_dir: /app
    expose:
      - "8003"
    networks:
      - backend
    depends_on:
      - db_postgres_publications
      - users_service

  db_postgres_publications:
    image: postgres:15
    volumes:
      - pgdata_publications:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - backend

  chat_service:
    build:
      context: ./services/chat
      dockerfile: Dockerfile
    working_dir: /app
    expose:
      - "8004"
    networks:
      - backend
    depends_on:
      - mongo_chat

  mongo_chat:
    image: mongo:5.0
    container_name: mongo
    restart: always
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    working_dir: /app
    expose:
      - "80"
    networks:
      - backend

volumes:
  pgdata_users:
  pgdata_community:
  pgdata_publications:
  mongo_data:

networks:
  backend:
    driver: bridge
