map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80 default_server;
    server_name _;

    # --- Seguridad y CORS ---
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    add_header Access-Control-Allow-Origin "http://192.168.100.88:5173" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Accept, Authorization, Content-Type, X-Requested-With, X-User-ID, X-User-Email" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Max-Age "3600" always;

    # Preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # --- WebSocket para Chat ---
    location ^~ /ws/chat/ {
        proxy_pass             http://chat_service:8004;
        proxy_http_version     1.1;
        proxy_set_header       Upgrade            $http_upgrade;
        proxy_set_header       Connection         $connection_upgrade;
        proxy_set_header       Host               $host;
        proxy_set_header       X-Real-IP          $remote_addr;
        proxy_set_header       X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header       X-Forwarded-Proto  $scheme;
        proxy_read_timeout     3600s;
    }

    # --- USERS: p√∫blicos ---
    location ~ ^/microservice-users/(login|register|logout|reset-password)/?$ {
        rewrite ^/microservice-users/(.*)$ /$1 break;
        proxy_pass         http://users_service:8001;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    # --- USERS: refresh token ---
    location = /microservice-users/token/refresh/ {
        proxy_pass         http://users_service:8001/token/refresh/;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    # --- USERS: validar token ---
    location = /microservice-users/validate-token/ {
        internal;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";

        proxy_pass         http://users_service:8001/validate-token/;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Authorization     $http_authorization;
    }

    # --- USERS: protegidos ---
    location /microservice-users/ {
        auth_request           /microservice-users/validate-token/;
        auth_request_set       $user_id    $upstream_http_x_user_id;
        auth_request_set       $user_email $upstream_http_x_user_email;

        rewrite ^/microservice-users/(.*)$ /$1 break;
        proxy_pass         http://users_service:8001/;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Authorization     $http_authorization;
        proxy_set_header   X-User-ID         $user_id;
        proxy_set_header   X-User-Email      $user_email;
    }

    # --- COMMUNITY: protegidos ---
    location /microservice-community/ {
        auth_request           /microservice-users/validate-token/;
        auth_request_set       $user_id    $upstream_http_x_user_id;
        auth_request_set       $user_email $upstream_http_x_user_email;

        rewrite ^/microservice-community/(.*)$ /$1 break;
        proxy_pass         http://community_service:8002/;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Authorization     $http_authorization;
        proxy_set_header   X-User-ID         $user_id;
        proxy_set_header   X-User-Email      $user_email;
    }

    # --- PUBLICATIONS: protegidos ---
    location /microservice-publication/ {
        auth_request           /microservice-users/validate-token/;
        auth_request_set       $user_id    $upstream_http_x_user_id;
        auth_request_set       $user_email $upstream_http_x_user_email;

        rewrite ^/microservice-publication/(.*)$ /$1 break;
        proxy_pass         http://publications_service:8003/;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Authorization     $http_authorization;
        proxy_set_header   X-User-ID         $user_id;
        proxy_set_header   X-User-Email      $user_email;
    }

    # --- SPA Frontend ---
    location / {
        access_log off;
        return 200 '{"status": "OK"}';
        add_header Content-Type application/json;
    }

    # --- Health check ---
    location /health {
        access_log off;
        return 200 '{"status": "OK"}';
        add_header Content-Type application/json;
    }

    # --- Errores ---
    error_page 502 /502.json;
    location = /502.json {
        return 502 '{"error": "Bad Gateway", "message": "The service is temporarily unavailable"}';
        add_header Content-Type application/json;
    }
}
